version: '3.8'

services:
  # Frontend
  frontend:
    build: 
      context: ./frontend
      dockerfile: ../docker/frontend/Dockerfile
    ports:
      - "3000:3000"
    environment:
      - VITE_API_URL=http://localhost:4000/api
    depends_on:
      - backend
    networks:
      - jbx-network

  # Backend API
  backend:
    build: 
      context: ./backend
      dockerfile: ../docker/backend/Dockerfile
    ports:
      - "4000:4000"
    environment:
      - NODE_ENV=development
      - PORT=4000
      - MONGODB_URL=mongodb://mongo:27017/jbx
      - POSTGRES_URL=postgresql://jbx:jbx_password@postgres:5432/jbx
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - JWT_EXPIRES_IN=7d
    depends_on:
      - postgres
      - mongo
      - redis
      - rabbitmq
    networks:
      - jbx-network
    volumes:
      - ./backend/src:/app/src
      - ./logs:/app/logs

  # Automation Worker
  automation-worker:
    build: 
      context: ./automation-worker
      dockerfile: ../docker/worker/Dockerfile
    environment:
      - NODE_ENV=development
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
      - PROXY_URL=${PROXY_URL:-}
    depends_on:
      - redis
      - rabbitmq
    networks:
      - jbx-network
    volumes:
      - ./automation-worker/src:/app/src
      - ./logs:/app/logs
    deploy:
      replicas: 2

  # Cover Letter Service
  cover-letter-service:
    build: 
      context: ./cover-letter-service
      dockerfile: ../docker/cover-letter/Dockerfile
    ports:
      - "8000:8000"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - REDIS_URL=redis://redis:6379
    depends_on:
      - redis
    networks:
      - jbx-network

  # Email Service
  email-service:
    build: 
      context: ./email-service
      dockerfile: ../docker/email/Dockerfile
    environment:
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
      - SMTP_HOST=${SMTP_HOST:-smtp.gmail.com}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
    depends_on:
      - redis
      - rabbitmq
    networks:
      - jbx-network

  # Scheduler
  scheduler:
    build: 
      context: ./scheduler
      dockerfile: ../docker/scheduler/Dockerfile
    environment:
      - NODE_ENV=development
      - MONGODB_URL=mongodb://mongo:27017/jbx
      - POSTGRES_URL=postgresql://jbx:jbx_password@postgres:5432/jbx
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
    depends_on:
      - postgres
      - mongo
      - redis
      - rabbitmq
    networks:
      - jbx-network

  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    environment:
      - POSTGRES_DB=jbx
      - POSTGRES_USER=jbx
      - POSTGRES_PASSWORD=jbx_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - jbx-network

  # MongoDB Database
  mongo:
    image: mongo:7
    environment:
      - MONGO_INITDB_ROOT_USERNAME=jbx
      - MONGO_INITDB_ROOT_PASSWORD=jbx_password
      - MONGO_INITDB_DATABASE=jbx
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - jbx-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - jbx-network

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - jbx-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
      - cover-letter-service
    networks:
      - jbx-network

volumes:
  postgres_data:
  mongo_data:
  redis_data:
  rabbitmq_data:

networks:
  jbx-network:
    driver: bridge
